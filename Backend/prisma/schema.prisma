// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userRole {
  User
  Instructor
}

enum courseLevel {
  easy
  medium
  hard
}

enum materialType {
  document
  video
  ppt
}

enum category {
  programming
  design
  business
  marketing
  music
  cooking
  photography
  health
  fitness
  lifestyle
  personalDevelopment
  academics
  language
  testPrep
  teaching
  other
}

model Users {
  id         Int          @id @default(autoincrement())
  email      String       @unique
  name       String
  password   String
  role       userRole
  credit     BigInt
  course     Course[]
  enrollment Enrollment[]
  review     Review[]
  post       Post[]
  completion Completion[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Course {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  category    category
  level       courseLevel
  price       BigInt
  creator     Users        @relation(fields: [userId], references: [id])
  userId      Int
  enrollment  Enrollment[]
  review      Review[]
  post        Post[]
  topic       Topic[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Enrollment {
  user      Users    @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  userId    Int
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

model Review {
  comment   String
  rating    Int
  user      Users    @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  userId    Int
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

model Post {
  id        Int      @id @default(autoincrement())
  message   String
  user      Users    @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  userId    Int
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Topic {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  course      Course       @relation(fields: [courseId], references: [id])
  courseId    Int
  material    Material[]
  completion  Completion[]
  assignment  Assigment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Material {
  id        Int          @id @default(autoincrement())
  name      String
  type      materialType
  link      String
  topic     Topic        @relation(fields: [topicId], references: [id])
  topicId   Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Completion {
  topic     Topic    @relation(fields: [topicId], references: [id])
  user      Users    @relation(fields: [userId], references: [id])
  topicId   Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([topicId, userId])
}

model Assigment {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  topic       Topic        @relation(fields: [topicId], references: [id])
  topicId     Int          @unique
  submission  Submission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Submission {
  score        Float     @default(0)
  isGraded     Boolean
  content      String
  assignment   Assigment @relation(fields: [assignmentId], references: [id])
  assignmentId Int       @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
